# vim: filetype=yaml
name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test_simple_backends:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        python-version:
          - "3.9"
        additional-deps:
          - [dask-min]
          - []
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          miniforge-version: latest
          miniforge-variant: Mambaforge
          channel-priority: strict
          activate-environment: ibis
          python-version: ${{ matrix.python-version }}
          condarc-file: ci/condarc

      - name: set backends
        id: set_backends
        run: echo '::set-output name=backends::["csv", "dask", "hdf5", "pandas", "parquet", "sqlite"]'

      - name: merge environments
        run: ./ci/merge_and_update_env.sh ${{ join(fromJSON(steps.set_backends.outputs.backends), ' ') }} ${{ join(matrix.additional-deps, ' ') }}

      - name: install ibis
        run: pip install .

      - name: download backend data
        run: python ci/datamgr.py download

      - name: install backend data
        run: |
          set -euo pipefail

          for backend in ${{ join(fromJSON(steps.set_backends.outputs.backends), ' ') }}; do
            python ci/datamgr.py "$backend"
          done

      - name: run tests
        run: ./ci/run_tests.sh
        env:
          PYTEST_BACKENDS: ${{ join(fromJSON(steps.set_backends.outputs.backends), ' ') }}

      - name: publish test report
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: simple_backends_${{ matrix.python-version }}-${{ matrix.os }}-${{ join(matrix.additional-deps, '-') }}
          path: junit.xml
          
  test_simple_backends_arm64:
    name: "Test ${{ matrix.pyver }} aarch64"
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        pyver: ["3.7", "3.9"]
        additional-deps:
          - [dask-min]
          - []
    runs-on: ubuntu-latest
    #env:
      #PYTEST_BACKENDS: ${{ join(fromJSON(steps.set_backends.outputs.backends), ' ') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2    
      - uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          miniforge-version: latest
          miniforge-variant: Mambaforge
          channel-priority: strict
          activate-environment: ibis
          python-version: ${{ matrix.pyver }}
          condarc-file: ci/condarc
      
      - name: Checkout submodules
        run: |
          git submodule init
          git submodule update
      - name: set backends
        id: set_backends
        run: echo '::set-output name=backends::["csv", "dask", "hdf5", "pandas", "parquet", "sqlite"]'	
      - name: merge environments
        run: ./ci/merge_and_update_env.sh ${{ join(fromJSON(steps.set_backends.outputs.backends), ' ') }} ${{ join(matrix.additional-deps, ' ') }}		
      - name: setup qemu
        id: qemu
        uses: docker/setup-qemu-action@v1
    
      - name: set up environment and run test
        run: |
            docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
            arm64v8/ubuntu \
            bash -exc 'apt-get update && \
            apt-get install -y sudo && \
            apt install software-properties-common -y && \
            sudo add-apt-repository ppa:deadsnakes/ppa -y && \
            apt install -y python${{ matrix.pyver }} && \
            apt install -y python${{ matrix.pyver }}-venv && \
            python${{ matrix.pyver }} -m venv .env && \
            source .env/bin/activate && \
            uname -m && \
            python -m pip install --upgrade pip setuptools wheel && \
            python -m pip install . && \
            python -m pip install click && \
            python -m pip install sqlalchemy && \
            python -m pip install plumbum && \
            python ci/datamgr.py download && \
            set -euo pipefail
            for backend in ${{ join(fromJSON(steps.set_backends.outputs.backends), ' ') }}; do
              python ci/datamgr.py "$backend"
            done
            python -m pip install pytest && \
            python -m pip install pytest-cov && \
            python -m pip install pytest-mock && \
            ./ci/run_tests.sh && \
            deactivate'
 
